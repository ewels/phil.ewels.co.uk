---
import BaseLayout from "@layouts/BaseLayout.astro";
import Button from "@components/Button.astro";
import Label from "@components/Label.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const talkEntries = await getCollection("talks");
  return talkEntries.map((entry) => ({
    params: { talk: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description} image={entry.data.heroImage}>
  {
    entry.data.heroImage && (
      <img
        src={entry.data.heroImage}
        alt={entry.data.title}
        class="mb-6 w-full border drop-shadow-lg dark:border-zinc-600"
      />
    )
  }
  <div class="flex flex-row items-center">
    <h1 class="mb-2 grow text-4xl font-bold">
      {entry.data.title}
    </h1>
    {
      entry.data.logoImage && (
        <img
          src={entry.data.logoImage}
          alt={entry.data.title}
          class="float-right block max-h-20 max-w-[10rem] dark:hidden"
        />
      )
    }
    {
      (entry.data.logoImage || entry.data.logoImageDark) && (
        <img
          src={entry.data.logoImageDark ?? entry.data.logoImage}
          alt={entry.data.title}
          class="float-right hidden max-h-20 max-w-[10rem] dark:block"
        />
      )
    }
  </div>
  <h2 class="mt-0 text-xl">{entry.data.description}</h2>
  <div class="my-3">
    <Label>{entry.data.type}</Label>
    <Label>{entry.data.date.toISOString().split("T")[0]}</Label>
    <Label>{entry.data.location}</Label>
  </div>
  <article class="prose prose-lg mb-12 mt-8 max-w-none text-justify dark:prose-invert prose-img:mx-auto">
    <Content />
  </article>
  <div class="my-8">
    {
      entry.data.eventURLs &&
        entry.data.eventURLs.map((eventURL) => (
          <Button href={eventURL} icon="bi:link-45deg" classes="mr-3">
            Event webpage
          </Button>
        ))
    }
    {
      entry.data.youtubeIDs &&
        entry.data.youtubeIDs.map((youtubeID) => (
          <Button href={"https://youtube.com/video/" + youtubeID} icon="mdi:youtube" classes="mr-3">
            Watch on YouTube
          </Button>
        ))
    }
    {
      entry.data.pdfURLs &&
        entry.data.pdfURLs.map((pdf) => (
          <Button href={pdf} icon="mdi:download" classes="mr-3">
            Download slides (PDF)
          </Button>
        ))
    }
  </div>
  <div class="my-8">
    {
      entry.data.youtubeIDs &&
        entry.data.youtubeIDs.map((youtubeID) => (
          <div class="aspect-h-9 aspect-w-16">
            <iframe
              class="border border-zinc-700"
              src={"https://www.youtube.com/embed/" + youtubeID}
              allowfullscreen
              class="absolute left-0 top-0 h-full w-full"
            />
          </div>
        ))
    }
    {
      entry.data.pdfURLs &&
        entry.data.pdfURLs.map((pdf) => (
          <div class="aspect-h-9 aspect-w-16 mt-8">
            <iframe
              class="border border-zinc-700"
              src={pdf}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            />
          </div>
        ))
    }
  </div>
</BaseLayout>
