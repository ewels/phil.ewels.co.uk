---
import BaseLayout from "@layouts/BaseLayout.astro";
import Button from "@components/Button.astro";
import Label from "@components/Label.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const talkEntries = await getCollection("talks");
  return talkEntries.map((entry) => ({
    params: { talk: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description} image={entry.data.heroImage}>
  <div class="md:flex md:justify-center">
    <div class="max-w-[750px]">
      {
        entry.data.heroImage && (
          <img
            src={entry.data.heroImage}
            alt={entry.data.title}
            class="mb-6 w-full border drop-shadow-lg dark:border-zinc-600"
          />
        )
      }
      <div class="flex flex-row items-center">
        <h1 class="my-2 grow text-4xl font-bold">
          {entry.data.title}
        </h1>
        {
          entry.data.iconImage && (
            <img
              src={entry.data.iconImage}
              alt={entry.data.title}
              class="float-right my-0 w-16 dark:w-24 dark:rounded dark:bg-white dark:p-4"
            />
          )
        }
      </div>
      <h2 class="mt-0 text-xl">{entry.data.description}</h2>
      <div class="my-2">
        <Label class="badge-secondary badge-outline badge">{entry.data.type}</Label>
        <Label class="badge-secondary badge-outline badge">{entry.data.date.toISOString().split("T")[0]}</Label>
        <Label class="badge-secondary badge-outline badge">{entry.data.location}</Label>
      </div>
      <div class="divider my-2"></div>
      <article class="prose-lg prose prose-img:mx-auto dark:prose-invert">
        <Content />
      </article>
      <div class="my-8">
        {
          entry.data.eventURLs &&
            entry.data.eventURLs.map((eventURL) => (
              <Button href={eventURL} icon="bi:link-45deg" classes="mr-3">
                Event website
              </Button>
            ))
        }
        {
          entry.data.youtubeURLs &&
            entry.data.youtubeURLs.map((youtubeURL) => (
              <div class="relative h-0 overflow-hidden max-w-full w-full">
                <iframe
                  src={"https://www.youtube.com/embed/" + youtubeURL}
                  frameborder="0"
                  allowfullscreen
                  class="absolute top-0 left-0 w-full h-full"
                />
              </div>
            ))
        }
        {
          entry.data.pdfURLs &&
            entry.data.pdfURLs.map((pdf) => (
              <>
                <Button href={pdf} icon="mdi:download">
                  Download slides (PDF)
                </Button>
                <div class="aspect-w-16 aspect-h-9 mt-8">
                  <iframe
                    src={pdf}
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                  />
                </div>
              </>
            ))
        }
      </div>
    </div>
  </div>
</BaseLayout>
